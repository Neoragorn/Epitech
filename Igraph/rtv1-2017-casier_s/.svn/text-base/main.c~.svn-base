/*
** main.c for main in /home/casier_s//tprtv1
** 
** Made by sofian casier
** Login   <casier_s@epitech.net>
** 
** Started on  Tue Feb  5 09:45:06 2013 sofian casier
** Last update Mon Mar 11 19:05:05 2013 sofian casier
*/

#include <mlx.h>
#include <math.h>
#include <stdlib.h>
#include <unistd.h>
#include "my.h"

int	coord(t_sphere *sphere, int x, int y)
{
  sphere->x1 = (X_1);
  sphere->y1 = (float)(WIN_X / 2) - (float)x;
  sphere->z1 = (float)(WIN_Y / 2) - (float)y;
  sphere->xo = X_O;
  sphere->yo = Y_O;
  sphere->zo = Z_O;
}

float	inter_plan(t_sphere *sphere, int x, int y)
{
  float k;

  sphere->z1 -= Z_PLAN;
  sphere->x1 -= X_1;
  sphere->y1 -= Y_1;
  //  rotation_x(sphere, 50);
  if (sphere->z1 == 0)
    return (0);
  k = - (sphere->zo / sphere->z1);
  // rotation_x(sphere, -50);
  sphere->z1 += Z_PLAN;
  sphere->x1 += X_1;
  sphere->y1 += Y_1;
  if (k < 0)
    return (0);
  else
    return (k);
}

float	create_sphere(t_sphere *sphere)
{
  float delta;
  float a;
  float b;
  float c;
  float k1;
  float k2;

  sphere->x1 -= X_SPHERE;
  sphere->y1 -= Y_SPHERE;
  sphere->z1 -= Z_SPHERE;
  a = powf(sphere->x1, 2) + powf(sphere->y1, 2) + powf(sphere->z1, 2);
  b = 2 * ((sphere->xo * sphere->x1) + (sphere->yo * sphere->y1) + (sphere->zo * sphere->z1));
  c = powf(sphere->xo, 2) + powf(sphere->yo, 2) + powf(sphere->zo, 2) - powf(R_SPHERE, 2);
  sphere->x1 += X_SPHERE;
  sphere->y1 += Y_SPHERE;
  sphere->z1 += Z_SPHERE;
  delta = powf(b, 2) - 4 * a * c;
  if (delta < 0)
    return (0);
  else if (delta == 0)
    {
      k1 = (-b) / (2 * a);
      return (k1);
    }
  else
    {
      k1 = (-b - sqrtf(delta)) / (2 * a);
      k2 = (-b + sqrtf(delta)) / (2 * a);
      if (k1 < 0 && k2 < 0)
	return (0);
      else if ((k2 < k1 && k2 > 0) || (k2 > 0 && k1 < 0))
	return (k2);
      else if ((k1 < k2 && k1 > 0) || (k1 > 0 && k2 < 0) || (k1 == k2))
	return (k1);
    }
}

int	calc(t_expose *expose, int x, int y)
{
  int		i;
  t_sphere	sphere;
  float		cs;
  float		ip;

  coord(&sphere, x, y);
  ip = inter_plan(&sphere, x, y);
  cs = create_sphere(&sphere);
  if (cs != 0 && ip == 0)
    return (0xFFFFF33);
  else if (ip != 0 && cs == 0)
    return (0x33CC00);
  else if (ip != 0 && cs != 0)
    {
      if (ip < cs && ip > 0)
	return (0x33CC00);
      else if (ip > cs && cs > 0)
	return (0xEFEFC2);
      else
	return (0x1AA6ED);
    }
  else
    return (0x1AA6ED);
}

int     main(int argc, char **argv, char **env)
{
  t_image       image;
  t_expose      expose;

  if ((expose.mlx_ptr = mlx_init()) == NULL)
    exit(-1);
  expose.win_ptr = mlx_new_window(expose.mlx_ptr, WIN_X, WIN_Y,"my fu'cking tp rtv1");
  expose.img = mlx_new_image(expose.mlx_ptr, WIN_X, WIN_Y);
  image.data = mlx_get_data_addr(expose.img, &image.bpp,
                                 &image.sizeline, &image.endian);
  draw_line(&image, &expose);
  mlx_key_hook(expose.win_ptr, write_arrow, 0);
  mlx_expose_hook(expose.win_ptr, manage_expose, &expose);
  mlx_loop(expose.mlx_ptr);
}
